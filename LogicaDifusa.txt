# -*- coding: utf-8 -*-
"""
Created on Sun May 27 14:35:16 2018

"""
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# New Antecedent/Consequent objects hold universe variables and membership
# functions
MetX = np.arange(0, 26, 1)
MetodoUsado = ctrl.Antecedent(MetX, 'MetodoUsado')

edad = ctrl.Antecedent(np.arange(16, 71, 1), 'edad')
hijos = ctrl.Antecedent(np.arange(0, 11, 1), 'hijos')

EfectX = np.arange(0, 26, 1)
efectividad = ctrl.Consequent(EfectX, 'efectividad')

# Auto-membership function population is possible with .automf(3, 5, or 7)
#MetodoUsado.automf(3)
#edad.automf(3)
#TerceraVariableDeEntrada.automf(3)

MetodoUsado['NoUso'] = fuzz.trapmf(MetodoUsado.universe, [0, 0, 5, 10])
MetodoUsado['CortoPlazo'] = fuzz.trapmf(MetodoUsado.universe, [5, 10, 15, 20])
MetodoUsado['LargoPlazo'] = fuzz.trapmf(MetodoUsado.universe, [15, 20, 25, 25])

fuzz.centroid

edad['Joven'] = fuzz.trapmf(edad.universe, [15, 15, 22, 27])
edad['Madura'] = fuzz.trapmf(edad.universe, [25, 29, 43, 46])
edad['Vieja'] = fuzz.trapmf(edad.universe, [45, 48, 70, 70])

hijos['pocos'] = fuzz.trapmf(hijos.universe, [0, 0, 2, 3])
hijos['muchos'] = fuzz.trapmf(hijos.universe, [3, 4, 5, 6])
hijos['demasiados'] = fuzz.trapmf(hijos.universe, [6, 7, 10, 10])

# Custom membership functions can be built interactively with a familiar,
# Pythonic API
efectividad['low'] = fuzz.trapmf(efectividad.universe, [0, 0, 5, 10])
efectividad['medium'] = fuzz.trapmf(efectividad.universe, [5, 10, 15, 20])
efectividad['high'] = fuzz.trapmf(efectividad.universe, [15, 20, 25, 25])

#quality['average'].view()

#Reglas random a ver que pasa
rule1 = ctrl.Rule(MetodoUsado['LargoPlazo'] and edad['Joven'] and hijos['demasiados'], efectividad['low'])
rule2 = ctrl.Rule(MetodoUsado['LargoPlazo'] and edad['Madura'] and hijos['muchos'], efectividad['medium'])
rule3 = ctrl.Rule(MetodoUsado['LargoPlazo'] and edad['Vieja'] and hijos['pocos'], efectividad['high'])
rule4 = ctrl.Rule(MetodoUsado['CortoPlazo'] and edad['Joven'] and hijos['demasiados'], efectividad['low'])
rule5 = ctrl.Rule(MetodoUsado['CortoPlazo'] and edad['Madura'] and hijos['muchos'], efectividad['medium'])
rule6 = ctrl.Rule(MetodoUsado['CortoPlazo'] | edad['Vieja'] | hijos['pocos'], efectividad['high'])

#MetodoUsado.view()
#edad.view()
#hijos.view()
#efectividad.view()

#rule1.view()

effectiveness_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6])
effectiveness = ctrl.ControlSystemSimulation(effectiveness_ctrl)

# Pass inputs to the ControlSystem using Antecedent labels with Pythonic API
# Note: if you like passing many inputs all at once, use .inputs(dict_of_data)

effectiveness.input['MetodoUsado'] = 20
effectiveness.input['edad'] = 18
effectiveness.input['hijos'] = 1

# Crunch the numbers
effectiveness.compute()

print("Efectividad del anticonceptivo: ")
print (effectiveness.output['efectividad'])
efectividad.view(sim=effectiveness)



#efectivo = fuzz.defuzz(EfectX, aggregated, 'centroid')



