# -*- coding: utf-8 -*-
"""
Created on Sun May 27 14:35:16 2018

"""
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# New Antecedent/Consequent objects hold universe variables and membership
# functions
MetX = np.arange(0, 30, 1)
MetodoUsado = ctrl.Antecedent(MetX, 'MetodoUsado')

edad = ctrl.Antecedent(np.arange(12, 55, 1), 'edad')
hijos = ctrl.Antecedent(np.arange(0, 16, 1), 'hijos')

EfectX = np.arange(0, 26, 1)
efectividad = ctrl.Consequent(EfectX, 'efectividad')

# Auto-membership function population is possible with .automf(3, 5, or 7)
#MetodoUsado.automf(3)
#edad.automf(3)
#TerceraVariableDeEntrada.automf(3)


MetodoUsado['CortoPlazo'] = fuzz.trapmf(MetodoUsado.universe, [0, 0, 3, 5])
MetodoUsado['LargoPlazo'] = fuzz.trapmf(MetodoUsado.universe, [3, 5, 30, 30])

MetodoUsado.view()

fuzz.centroid

edad['Joven'] = fuzz.trapmf(edad.universe, [12, 12, 20, 25])
edad['Madura'] = fuzz.trapmf(edad.universe, [20, 25, 35, 40])
edad['Veterana'] = fuzz.trapmf(edad.universe, [35, 40, 55, 55])

edad.view()

hijos['pocos'] = fuzz.trapmf(hijos.universe, [0, 0, 2, 3])
hijos['moderado'] = fuzz.trapmf(hijos.universe, [2, 3, 5, 6])
hijos['muchos'] = fuzz.trapmf(hijos.universe, [5, 6, 15, 15])

hijos.view()

# Custom membership functions can be built interactively with a familiar,
# Pythonic API
efectividad['baja'] = fuzz.trapmf(efectividad.universe, [0, 0, 5, 10])
efectividad['media'] = fuzz.trapmf(efectividad.universe, [5, 10, 15, 20])
efectividad['alta'] = fuzz.trapmf(efectividad.universe, [15, 20, 25, 25])

#quality['average'].view()

#Reglas random a ver que pasa
rule1 = ctrl.Rule(MetodoUsado['LargoPlazo'] and edad['Joven'] and hijos['muchos'], efectividad['baja'])
rule2 = ctrl.Rule(MetodoUsado['LargoPlazo'] and edad['Madura'] and hijos['moderado'], efectividad['media'])
rule3 = ctrl.Rule(MetodoUsado['LargoPlazo'] and edad['Veterana'] and hijos['pocos'], efectividad['alta'])
rule4 = ctrl.Rule(MetodoUsado['CortoPlazo'] and edad['Joven'] and hijos['muchos'], efectividad['baja'])
rule5 = ctrl.Rule(MetodoUsado['CortoPlazo'] and edad['Madura'] and hijos['moderado'], efectividad['media'])
rule6 = ctrl.Rule(MetodoUsado['CortoPlazo'] | edad['Veterana'] | hijos['pocos'], efectividad['alta'])

#MetodoUsado.view()
#edad.view()
#hijos.view()
#efectividad.view()

#rule1.view()

effectiveness_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6])
effectiveness = ctrl.ControlSystemSimulation(effectiveness_ctrl)



# Pass inputs to the ControlSystem using Antecedent labels with Pythonic API
# Note: if you like passing many inputs all at once, use .inputs(dict_of_data)

#Valores de entrada para el fuzzy

a = input("Ingrese el valor del Metodo Anticonceptivo Usado: ")
b = input("Ingrese la edad: ")
c = input("Ingrese el numero de hijos: ") 


effectiveness.input['MetodoUsado'] = a
effectiveness.input['edad'] = b
effectiveness.input['hijos'] = c

# Crunch the numbers
effectiveness.compute()

print("Efectividad del anticonceptivo: ")
print (effectiveness.output['efectividad'])
efectividad.view(sim=effectiveness)

z = effectiveness.output['efectividad']

if 0 <= z <= 6: 
    print("La efectividad del método usado es mala")
    
elif 6 < z <= 20: 
    print("La efectividad del método usado es media")
    
elif 20 < z <= 26:
    print("La efectividad del método usado es buena")





#d = effectiveness.['efectividad']

#print(d)







#efectivo = fuzz.defuzz(EfectX, aggregated, 'centroid')



